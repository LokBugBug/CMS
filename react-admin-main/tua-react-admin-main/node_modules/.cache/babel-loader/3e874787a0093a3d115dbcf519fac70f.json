{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, each } from '@antv/util';\nimport { intersect } from '../../../util/collision-detect';\nimport { getLabelBackgroundInfo } from '../util';\nimport { createWorker } from '../util/createWorker';\nimport { code as layoutCode } from './worker/hide-overlap';\n\nvar layout = function layout(items) {\n  var boxes = items.slice();\n\n  for (var i = 0; i < boxes.length; i++) {\n    var box1 = boxes[i];\n\n    if (box1.visible) {\n      for (var j = i + 1; j < boxes.length; j++) {\n        var box2 = boxes[j];\n\n        if (box1 !== box2 && box2.visible) {\n          if (intersect(box1, box2)) {\n            box2.visible = false;\n          }\n        }\n      }\n    }\n  }\n\n  return boxes;\n};\n\nvar cache = new Map();\nvar worker = createWorker(layoutCode);\n/**\n * label 防遮挡布局：在不改变 label 位置的情况下对相互重叠的 label 进行隐藏（非移除）\n * 不同于 'overlap' 类型的布局，该布局不会对 label 的位置进行偏移调整。\n * @param labels 参与布局调整的 label 数组集合\n */\n\nexport function hideOverlap(labelItems, labels, shapes, region) {\n  // todo 添加 label rank\n  return new Promise(function (resolve) {\n    var boxes = labels.map(function (d, idx) {\n      return __assign(__assign({}, getLabelBackgroundInfo(d, labelItems[idx], get(labelItems[idx], 'background.padding'))), {\n        visible: true\n      });\n    });\n    var memoKey = JSON.stringify(boxes);\n\n    var cb = function cb(items) {\n      cache.set(memoKey, items);\n      each(items, function (_a, idx) {\n        var visible = _a.visible;\n        var labelShape = labels[idx];\n\n        if (visible) {\n          labelShape === null || labelShape === void 0 ? void 0 : labelShape.show();\n        } else {\n          labelShape === null || labelShape === void 0 ? void 0 : labelShape.hide();\n        }\n      });\n      return resolve(items);\n    };\n\n    if (cache.get(memoKey)) {\n      cb(cache.get(memoKey));\n    } else if (worker) {\n      // Do layout in worker.\n      try {\n        worker.postMessage(JSON.stringify({\n          type: 'hide-overlap',\n          items: boxes\n        }));\n\n        worker.onmessage = function (e) {\n          return cb(Array.isArray(e.data) ? e.data : []);\n        };\n\n        worker.onmessageerror = function (e) {\n          console.warn('[AntV G2] Web worker is not available'); // Normal layout in main thread.\n\n          cb(layout(boxes));\n        };\n      } catch (e) {\n        console.error(e);\n        cb(layout(boxes));\n      }\n    } else {\n      // Normal layout in main thread.\n      cb(layout(boxes));\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}